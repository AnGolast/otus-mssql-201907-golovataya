use WideWorldImporters
go
--1) Написать функцию возвращающую Клиента с наибольшей суммой покупки.
create function dbo.max_sum_inv()
returns nvarchar(100)
as begin
declare @cust nvarchar(100)
set @cust = (
select cust.CustomerName
from Sales.Invoices as inv 
join Sales.Customers as cust on cust.CustomerID = inv.CustomerID
where inv.InvoiceID = (select top 1 InvoiceID from Sales.InvoiceLines order by ExtendedPrice desc))
return @cust;
end;
go



2) Написать хранимую процедуру с входящим параметром СustomerID, выводящую сумму покупки по этому клиенту.
Использовать таблицы :
Sales.Customers
Sales.Invoices
Sales.InvoiceLines
3) Создать одинаковую функцию и хранимую процедуру, посмотреть в чем разница в производительности и почему.
4) Создайте табличную функцию покажите как ее можно вызвать для каждой строки result set'а без использования цикла.

Во всех процедурах, в описании укажите для преподавателям
5) какой уровень изоляции нужен и почему.

Опционально
6) Переписываем одну и ту же процедуру kitchen sink с множеством входных параметров по поиску в заказах на динамический SQL.

Сравниваем планы запроса.
7) Напишите запрос в транзакции где есть выборка, вставка\добавление\удаление данных и параллельно запускаем выборку данных в разных уровнях изоляции, нужно предоставить мини отчет, что на каком уровне было видно со скриншотами и ваши выводы (1-2 предложение)
8) Сделайте параллельно в 2х окнах добавление данных в одну таблицу с разным уровнем изоляции, изменение данных в одной таблице, изменение одной и той же строки. Что в итоге получилось, что нового узнали.
