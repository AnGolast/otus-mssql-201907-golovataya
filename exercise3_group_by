use [WideWorldImporters];

--1. Посчитать среднюю цену товара, общую сумму продажи по месяцам
select datename(month, TransactionDate) as [month], avg(UnitPrice) as avg_price, sum(TransactionAmount) as sum_transaction
from Sales.CustomerTransactions as custtrasact
left join  Sales.InvoiceLines as invoice on invoice.InvoiceID=custtrasact.InvoiceID
group by datename(month, TransactionDate);

--2. Отобразить все месяцы, где общая сумма продаж превысила 10 000 
with amount_sum as (
			select datename(month, TransactionDate) as [month], sum(TransactionAmount) as [sum_transaction]
			from Sales.CustomerTransactions as custtrasact
			group by datename(month, TransactionDate)
				)
select [month], [sum_transaction] 
from amount_sum
where [sum_transaction] > 100000:

--3. Вывести сумму продаж, дату первой продажи и количество проданного по месяцам, по товарам, 
--продажи которых менее 50 ед в месяц. Группировка должна быть по году и месяцу.
--grouping sets 
select sum(Quantity) as sum_quantity,sum(TransactionAmount) as [sum_transaction], month(TransactionDate) as month_trans,year(TransactionDate) as year_trans
from Sales.CustomerTransactions as cust_trans
join Sales.Invoices as invoices on cust_trans.InvoiceID = invoices.InvoiceID
join Sales.OrderLines as orders on orders.OrderID = invoices.OrderID
--where StockItemID = 32
group by StockItemID,
	grouping sets (
		(month(TransactionDate),
		year(TransactionDate))
				)
having sum(Quantity) < 50 
order by  year_trans, month_trans;

--обычная группировка 
select sum(Quantity) as sum_quantity,sum(TransactionAmount) as [sum_transaction], month(TransactionDate) as month_trans,year(TransactionDate) as year_trans
from Sales.CustomerTransactions as cust_trans
join Sales.Invoices as invoices on cust_trans.InvoiceID = invoices.InvoiceID
join Sales.OrderLines as orders on orders.OrderID = invoices.OrderID
--where StockItemID = 32
group by StockItemID,month(TransactionDate),year(TransactionDate)
having sum(Quantity) < 50 
order by  year_trans, month_trans;

--4. Написать рекурсивный CTE sql запрос и заполнить им временную таблицу и табличную переменную
--создана таблица MyEmployees 
--временная таблица
create table #time_table
(EmployeeID smallint NOT NULL,
Name nvarchar(80) NOT NULL,
Title nvarchar(50) NOT NULL);

with recurs_cte as (select EmployeeID,(FirstName + LastName) as Name, Title, DeptID, ManagerID
					from dbo.MyEmployees
					where ManagerID is null
					union all
					select emp.EmployeeID,(emp.FirstName + emp.LastName) as Name, emp.Title, emp.DeptID, emp.ManagerID
					from dbo.MyEmployees as emp
						inner join recurs_cte on recurs_cte.EmployeeID=emp.ManagerID )
insert into #time_table (EmployeeID, Name,Title) 
select EmployeeID, Name,Title
from recurs_cte;

--табличная переменная
declare @tab table (EmployeeID smallint NOT NULL,
					Name nvarchar(80) NOT NULL,
					Title nvarchar(50) NOT NULL);

with recurs_cte as (select EmployeeID,(FirstName + LastName) as Name, Title, DeptID, ManagerID
from dbo.MyEmployees
where ManagerID is null
union all
select emp.EmployeeID,(emp.FirstName + emp.LastName) as Name, emp.Title, emp.DeptID, emp.ManagerID
from dbo.MyEmployees as emp
	inner join recurs_cte on recurs_cte.EmployeeID=emp.ManagerID )

insert into @tab
select EmployeeID, Name,Title
				  from recurs_cte 
select *
from @tab
